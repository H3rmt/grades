name: "create release"

on:
  push:
    branches:
      - release

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release-id: ${{ steps.create-release.outputs.result }}
      version: ${{ steps.get-version.outputs.value }}

    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          cache-dependency-path: ./workflows/yarn.lock
          node-version: 16
          cache: 'yarn'
      - run: yarn --cwd ./workflows install --frozen-lockfile
      - run: yarn --cwd ./workflows run dist
      - name: Get Version
        id: get-version
        uses: SebRollen/toml-action@v1.0.2
        with:
          file: 'src-tauri/Cargo.toml'
          field: "package.version"
      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          retries: 3
          script: |
            const script = require('./workflows/dist/create-release-create-release.js')
            return await script.default({github, context, core, version: '${{ steps.get-version.outputs.value }}', commit_head_message: `${{ github.event.head_commit.message }}`, branch: '${{ github.event.ref }}'})

  tauri:
    name: build tauri
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        platform: [ macos-latest, ubuntu-20.04, windows-latest, ubuntu-latest ]
    runs-on: ${{ matrix.platform }}
    env:
      CARGO_TERM_COLOR: always
      CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
    outputs:
      winupdate: ${{ steps.build.outputs.winupdate }}
      macupdate: ${{ steps.build.outputs.macupdate }}
      linupdate: ${{ steps.build.outputs.linupdate }}
      winsig: ${{ steps.build.outputs.winsig }}
      macsig: ${{ steps.build.outputs.macsig }}
      linsig: ${{ steps.build.outputs.linsig }}

    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: yarn
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04' || matrix.platform == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf
      - uses: h3rmt/tauri-action@v1
        id: build
        env:
          TOKEN: ${{ secrets.PAT }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          releaseId: ${{ needs.create-release.outputs.release-id }}
          version: ${{ needs.create-release.outputs.version }}
          name: ${{ github.event.repository.name }}
          addVendorSsl: true
          checkOpenSslVersion: true

  update-release:
    runs-on: ubuntu-latest
    needs: [ tauri, create-release ]

    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          cache-dependency-path: ./workflows/yarn.lock
          node-version: 16
          cache: 'yarn'
      - run: yarn --cwd ./workflows install --frozen-lockfile
      - run: yarn --cwd ./workflows run dist
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        with:
          retries: 3
          script: |
            const script = require('./workflows/dist/create-release-update-release.js')
            await script.default({github, context, core, release_id: ${{ needs.create-release.outputs.release-id }}, commit_head_message: `${{ github.event.head_commit.message }}`, version: '${{ needs.create-release.outputs.version }}'})

  update-json:
    runs-on: ubuntu-latest
    needs: [ update-release, tauri, create-release ]

    steps:
      - name: update-update-json
        uses: h3rmt/tauri-action@v1
        env:
          TOKEN: ${{ secrets.PAT }}
        with:
          releaseId: ${{ needs.create-release.outputs.release-id }}
          version: ${{ needs.create-release.outputs.version }}
          fileName: update.json
          releaseNotes: ${{ github.event.head_commit.message }}
          releaseTagName: ${{ format('{0}-v{1}',github.event.repository.name, needs.create-release.outputs.version) }}

          winsig: ${{ needs.tauri.outputs.winsig }}
          macsig: ${{ needs.tauri.outputs.macsig }}
          linsig: ${{ needs.tauri.outputs.linsig }}
          winupdate: ${{ needs.tauri.outputs.winupdate }}
          macupdate: ${{ needs.tauri.outputs.macupdate }}
          linupdate: ${{ needs.tauri.outputs.linupdate }}
